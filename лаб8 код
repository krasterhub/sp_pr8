Файл: Vector_Nikita_Ch.сpp --------------------------------------------------------------

#include "Vector.h"
#include <fstream>
#include <iostream> //Чумаченко Никита

// Конструктор, инициализирующий вектор значениями
Vector::Vector(const std::vector<double>& values) : data(values) {}

// Оператор сложения векторов
Vector Vector::operator+(const Vector& other) const {
    if (data.size() != other.size()) {
        throw std::runtime_error("Vector sizes don't match!");
    }
    Vector result(data);
    for (size_t i = 0; i < data.size(); ++i) {
        result[i] += other[i];  // Поэлементное сложение
    }
    return result;
}

// Оператор вычитания векторов
Vector Vector::operator-(const Vector& other) const {
    if (data.size() != other.size()) {
        throw std::runtime_error("Vector sizes don't match!");
    }
    Vector result(data);
    for (size_t i = 0; i < data.size(); ++i) {
        result[i] -= other[i];  // Поэлементное вычитание
    }
    return result;
}

// Оператор умножения вектора на скаляр
Vector Vector::operator*(double scalar) const {
    Vector result(data);
    for (size_t i = 0; i < data.size(); ++i) {
        result[i] *= scalar;  // Умножение каждого элемента
    }
    return result;
}

// Скалярное произведение векторов
double Vector::dot(const Vector& other) const {
    if (data.size() != other.size()) {
        throw std::runtime_error("Vector sizes don't match!");
    }
    double result = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        result += data[i] * other[i];  // Накопление суммы произведений
    }
    return result;
}

// Сохранение вектора в файл
void Vector::saveToFile(const std::string& filename) const {
    std::ofstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file for writing!");
    }
    for (double val : data) {
        file << val << " ";  // Запись значений через пробел
    }
    file.close();
}

// Загрузка вектора из файла
void Vector::loadFromFile(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file for reading!");
    }
    data.clear();
    double val;
    while (file >> val) {
        data.push_back(val);  // Чтение значений до конца файла
    }
    file.close();
}

// Возвращает размер вектора
size_t Vector::size() const { return data.size(); }

// Оператор доступа к элементам (неконстантный)
double& Vector::operator[](size_t index) { return data[index]; }

// Оператор доступа к элементам (константный)
const double& Vector::operator[](size_t index) const { return data[index]; }

// Оператор вывода вектора в поток
std::ostream& operator<<(std::ostream& os, const Vector& vec) {
    os << "[ ";
    for (double val : vec.data) {
        os << val << " ";  // Форматированный вывод элементов
    }
    os << "]";
    return os;


Файл: main.cpp ---------------------------------------------------------------------------

#include "Vector.h"
#include <iostream> //Чумаченко Никита 

int main() {
    // Вывод информации об авторе
    std::cout << "Author: Nikita Chumachenko\n\n";

    try {
        // Создаем два вектора для демонстрации операций
        Vector v1({ 1.0, 2.0, 3.0 });
        Vector v2({ 4.0, 5.0, 6.0 });

        // Вывод исходных векторов
        std::cout << "v1: " << v1 << std::endl;
        std::cout << "v2: " << v2 << std::endl;

        // Сложение векторов
        Vector sum = v1 + v2;
        std::cout << "Sum: " << sum << std::endl;

        // Вычитание векторов
        Vector diff = v1 - v2;
        std::cout << "Difference: " << diff << std::endl;

        // Умножение вектора на скаляр
        Vector scaled = v1 * 2.5;
        std::cout << "Scaled (x2.5): " << scaled << std::endl;

        // Скалярное произведение
        double dotProduct = v1.dot(v2);
        std::cout << "Dot product: " << dotProduct << std::endl;

        // Сохранение и загрузка вектора из файла
        v1.saveToFile("vector.txt");
        Vector loadedVec;
        loadedVec.loadFromFile("vector.txt");
        std::cout << "Loaded vector: " << loadedVec << std::endl;

    }
    catch (const std::exception& e) {
        // Обработка возможных ошибок
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}


Файл: Vector.h ---------------------------------------------------------------------------------

#pragma once
#include <vector>
#include <string>
#include <stdexcept> //Чумаченко Никита 

class Vector {
private:
    std::vector<double> data;

public:
    // Конструкторы
    Vector() = default;
    Vector(const std::vector<double>& values);

    // Основные операции
    Vector operator+(const Vector& other) const;
    Vector operator-(const Vector& other) const;
    Vector operator*(double scalar) const;
    double dot(const Vector& other) const;  // Скалярное произведение

    // Работа с файлами
    void saveToFile(const std::string& filename) const;
    void loadFromFile(const std::string& filename);

    // Вспомогательные методы
    size_t size() const;
    double& operator[](size_t index);
    const double& operator[](size_t index) const;

    // Вывод вектора
    friend std::ostream& operator<<(std::ostream& os, const Vector& vec);
};



